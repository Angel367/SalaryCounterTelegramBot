import telebot
from telebot import types
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ .env
BOT_TOKEN = os.getenv('BOT_TOKEN')
MY_SALARY = float(os.getenv('MY_SALARY'))
PARTNER_SALARY = float(os.getenv('PARTNER_SALARY'))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

bot = telebot.TeleBot(BOT_TOKEN)


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_calc = types.KeyboardButton('üíµ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–∑–Ω–æ—Å—ã')
    item_info = types.KeyboardButton('üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
    markup.add(item_calc, item_info)

    bot.send_message(
        message.chat.id,
        f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–∑–Ω–æ—Å–æ–≤ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º.\n"
        f"üìà –¢–µ–∫—É—â–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã:\n"
        f"‚Ä¢ –ï–≥–æ—Ä–∏—á–µ–∫: {format_number(MY_SALARY)} ‚ÇΩ\n"
        f"‚Ä¢ –õ–∏–Ω—á–∏—á–µ–∫: {format_number(PARTNER_SALARY)} ‚ÇΩ\n\n"
        "–ù–∞–∂–º–∏—Ç–µ 'üíµ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–∑–Ω–æ—Å—ã' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞—Å—á–µ—Ç.",
        reply_markup=markup,
        parse_mode='Markdown'
    )


@bot.message_handler(func=lambda message: message.text == 'üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
def show_settings(message):
    total_income = MY_SALARY + PARTNER_SALARY
    my_share = MY_SALARY / total_income
    partner_share = PARTNER_SALARY / total_income

    bot.send_message(
        message.chat.id,
        f"‚öôÔ∏è *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n\n"
        f"‚Ä¢ –ï–≥–æ—Ä–∏—á–µ–∫: `{format_number(MY_SALARY)}` ‚ÇΩ\n"
        f"‚Ä¢ –õ–∏–Ω—á–∏—á–µ–∫: `{format_number(PARTNER_SALARY)}` ‚ÇΩ\n"
        f"‚Ä¢ –û–±—â–∏–π –¥–æ—Ö–æ–¥: `{format_number(total_income)}` ‚ÇΩ\n"
        f"‚Ä¢ –ï–≥–æ—Ä–∏—á–µ–∫–∞ –¥–æ–ª—è: {my_share:.1%}\n"
        f"‚Ä¢ –õ–∏–Ω—á–∏—á–µ–∫–∞ –¥–æ–ª—è: {partner_share:.1%}",
        parse_mode='Markdown'
    )


@bot.message_handler(func=lambda message: message.text == 'üíµ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–∑–Ω–æ—Å—ã')
def ask_amount(message):
    msg = bot.send_message(message.chat.id, "üí∂ –í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å (—Ä—É–±):")
    bot.register_next_step_handler(msg, process_amount_step)


def process_amount_step(message):
    try:
        amount = float(message.text.replace(' ', '').replace(',', '.'))

        if amount <= 0:
            bot.send_message(message.chat.id, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return

        calculate_contributions(message, amount)

    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")


def calculate_contributions(message, amount):
    # –†–∞—Å—á–µ—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
    total_income = MY_SALARY + PARTNER_SALARY
    my_share = MY_SALARY / total_income
    partner_share = PARTNER_SALARY / total_income

    my_contribution = amount * my_share
    partner_contribution = amount * partner_share

    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    result_text = f"""
üí° *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:*

‚Ä¢ –ï–≥–æ—Ä–∏—á–∫–æ–≤–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞: `{format_number(MY_SALARY)}` ‚ÇΩ
‚Ä¢ –õ–∏–Ω—á–∏–∫–æ–≤–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞: `{format_number(PARTNER_SALARY)}` ‚ÇΩ
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: `{format_number(amount)}` ‚ÇΩ

üìä *–ü—Ä–æ–ø–æ—Ä—Ü–∏–∏:*
‚Ä¢ –ï–≥–æ—Ä–∏–∫–æ–≤–∞ –¥–æ–ª—è: {my_share:.1%}
‚Ä¢ –õ–∏–Ω—á–∏–∫–æ–≤–∞ –¥–æ–ª—è: {partner_share:.1%}

üíµ *–í–∑–Ω–æ—Å—ã:*
‚Ä¢ –ï–≥–æ—Ä–∏–∫–æ–≤ –≤–∑–Ω–æ—Å: `{format_number(my_contribution)}` ‚ÇΩ
‚Ä¢ –õ–∏–Ω—á–∏–∫–æ–≤ –≤–∑–Ω–æ—Å: `{format_number(partner_contribution)}` ‚ÇΩ

‚úÖ *–ü—Ä–æ–≤–µ—Ä–∫–∞:* `{format_number(my_contribution + partner_contribution)}` ‚ÇΩ
"""

    bot.send_message(message.chat.id, result_text, parse_mode='Markdown')


def format_number(num):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏ –∑–∞–ø—è—Ç–æ–π"""
    return f"{num:,.2f}".replace(',', ' ').replace('.', ',')


@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    if message.text not in ['üíµ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–∑–Ω–æ—Å—ã', 'üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏']:
        bot.send_message(
            message.chat.id,
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/help - –ø–æ–º–æ—â—å"
        )


if __name__ == '__main__':
    print("=" * 50)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:")
    print(f"‚Ä¢ –ï–≥–æ—Ä–∏–∫–æ–≤–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞: {format_number(MY_SALARY)} ‚ÇΩ")
    print(f"‚Ä¢ –õ–∏–Ω—á–∏–∫–æ–≤–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞: {format_number(PARTNER_SALARY)} ‚ÇΩ")
    print(f"‚Ä¢ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {format_number(MY_SALARY + PARTNER_SALARY)} ‚ÇΩ")
    print("=" * 50)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()